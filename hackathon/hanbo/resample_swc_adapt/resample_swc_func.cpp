/* resample_swc_func.cpp
 * This is a plugin to resample neuron swc subject to a fixed step length.
 * 2012-03-02 : by Yinan Wan
 */

#include <v3d_interface.h>
#include "v3d_message.h"
#include "resample_swc_func.h"
#include "resampling.h"
#include "math.h"
#include "customary_structs/vaa3d_neurontoolbox_para.h"
#include <vector>
#include <iostream>
using namespace std;

const QString title = QObject::tr("Resample Neuron");

bool export_list2file(QList<NeuronSWC> & lN, QString fileSaveName, QString fileOpenName)
{
	QFile file(fileSaveName);
	if (!file.open(QIODevice::WriteOnly|QIODevice::Text))
		return false;
	QTextStream myfile(&file);
	myfile<<"# generated by Vaa3D Plugin resample_swc"<<endl;
	myfile<<"# source file(s): "<<fileOpenName<<endl;
	myfile<<"# id,type,x,y,z,r,pid"<<endl;
	for (V3DLONG i=0;i<lN.size();i++)
		myfile << lN.at(i).n <<" " << lN.at(i).type << " "<< lN.at(i).x <<" "<<lN.at(i).y << " "<< lN.at(i).z << " "<< lN.at(i).r << " " <<lN.at(i).pn << "\n";

	file.close();
	cout<<"swc file "<<fileSaveName.toStdString()<<" has been generated, size: "<<lN.size()<<endl;
	return true;
};

int resample_swc(V3DPluginCallback2 &callback, QWidget *parent)
{
	QString fileOpenName;
	fileOpenName = QFileDialog::getOpenFileName(0, QObject::tr("Open File"),
			"",
			QObject::tr("Supported file (*.swc *.eswc)"
				";;Neuron structure	(*.swc)"
				";;Extended neuron structure (*.eswc)"
				));
	if(fileOpenName.isEmpty()) 
		return 0;
	double step = 0;
	NeuronTree nt;
	if (fileOpenName.toUpper().endsWith(".SWC") || fileOpenName.toUpper().endsWith(".ESWC"))
	{
		bool ok;
		nt = readSWC_file(fileOpenName);
		step = QInputDialog::getDouble(parent, "Please specify the resampling step length","Step length:",1,0,2147483647,0.1,&ok);
		if (!ok)
			return 0;
	}
	
	NeuronTree result = resample(nt, step);
	
	QString fileDefaultName = fileOpenName+QString("_resampled.swc");
	//write new SWC to file
	QString fileSaveName = QFileDialog::getSaveFileName(0, QObject::tr("Save File"),
			fileDefaultName,
			QObject::tr("Supported file (*.swc)"
				";;Neuron structure	(*.swc)"
				));
	if (!export_list2file(result.listNeuron,fileSaveName,fileOpenName))
	{
		v3d_msg("fail to write the output swc file.");
		return 0;
	}


	return 1;
}

bool resample_swc(const V3DPluginArgList & input, V3DPluginArgList & output)
{
	cout<<"Welcome to resample_swc"<<endl;
	vector<char*>* inlist = (vector<char*>*)(input.at(0).p);
	vector<char*>* outlist = NULL;
	vector<char*>* paralist = NULL;

	if(input.size() != 2) 
	{
		printf("Please specify both input file and step length parameter.\n");
		return false;
	}
	paralist = (vector<char*>*)(input.at(1).p);
	if (paralist->size()!=1)
	{
		printf("Please specify only one parameter - the resampling step length.\n");
		return false;
	}
	double step = atof(paralist->at(0));

	QString fileOpenName = QString(inlist->at(0));
	QString fileSaveName;
	if (output.size()==0)
	{
		printf("No outputfile specified.\n");
		fileSaveName = fileOpenName + "_resampled.swc";
	}
	else if (output.size()==1)
	{
		outlist = (vector<char*>*)(output.at(0).p);
		fileSaveName = QString(outlist->at(0));
	}
	else
	{
		printf("You have specified more than 1 output file.\n");
		return false;
	}

	NeuronTree nt;
	if (fileOpenName.toUpper().endsWith(".SWC") || fileOpenName.toUpper().endsWith(".ESWC"))
		nt = readSWC_file(fileOpenName);
	
	NeuronTree result = resample(nt,step);
	if (!export_list2file(result.listNeuron, fileSaveName, fileOpenName))
	{
		printf("fail to write the output swc file.\n");
		return false;
	}

	return true;
}

bool resample_swc_toolbox(const V3DPluginArgList & input)
{
	vaa3d_neurontoolbox_paras * paras = (vaa3d_neurontoolbox_paras *)(input.at(0).p);
	NeuronTree nt = paras->nt;
	QString fileOpenName = nt.file;
	
	bool ok;
	double step = QInputDialog::getDouble(0, "Please specify the resampling step length","Step length:",1,0,2147483647,0.1,&ok);
	if (!ok)
		return true;
	
	NeuronTree result = resample(nt,step);
	QString fileDefaultName = fileOpenName+QString("_resampled.swc");
	//write new SWC to file
	QString fileSaveName = QFileDialog::getSaveFileName(0, QObject::tr("Save File"),
			fileDefaultName,
			QObject::tr("Supported file (*.swc)"
				";;Neuron structure	(*.swc)"
				));
	if (!export_list2file(result.listNeuron,fileSaveName,fileOpenName))
	{
		v3d_msg("fail to write the output swc file.");
		return false;
	}

	return true;

}

//Hanbo on 141002
int resample_swc_adaptive(V3DPluginCallback2 &callback, QWidget *parent)
{
	QString fileOpenName;
	fileOpenName = QFileDialog::getOpenFileName(0, QObject::tr("Open File"),
			"",
			QObject::tr("Supported file (*.swc *.eswc)"
				";;Neuron structure	(*.swc)"
				";;Extended neuron structure (*.eswc)"
				));
	if(fileOpenName.isEmpty()) 
		return 0;
	double angleT = 0, radiusT = 0;
	NeuronTree nt;
	if (fileOpenName.toUpper().endsWith(".SWC") || fileOpenName.toUpper().endsWith(".ESWC"))
	{
        //bool ok;
		nt = readSWC_file(fileOpenName);
        AdaptiveSampleDialog dialog(callback, parent);
        if (dialog.exec()!=QDialog::Accepted)
            return 0;
        dialog.update();
        angleT=cos(M_PI/180*dialog.angleT);
        radiusT=dialog.radiusT;
        //angleT = QInputDialog::getDouble(parent, "Please specify the curveness threshold","curveness threshold (0~1, 1: least down sample, 0: most down sample):",0.95,0,1,4,&ok);
        //radiusT = QInputDialog::getDouble(parent, "Please specify the radius change threshold","radius change threshold (0~1, 1: radius change not allowed, 0: ignore radius change):",0.5,0,1,4,&ok);
        //if (!ok)
        //	return 0;
	}
	
	NeuronTree result = resample_adaptive(nt, angleT, radiusT);
	
	QString fileDefaultName = fileOpenName+QString("_resampled.swc");
	//write new SWC to file
	QString fileSaveName = QFileDialog::getSaveFileName(0, QObject::tr("Save File"),
			fileDefaultName,
			QObject::tr("Supported file (*.swc)"
				";;Neuron structure	(*.swc)"
				));
	if (!export_list2file(result.listNeuron,fileSaveName,fileOpenName))
	{
		v3d_msg("fail to write the output swc file.");
		return 0;
	}


	return 1;
}
